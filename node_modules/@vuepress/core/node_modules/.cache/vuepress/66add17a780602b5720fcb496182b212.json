{"remainingRequest":"/home/daniel/projects/1-personal/vuepress-lwd/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/daniel/projects/1-personal/vuepress-lwd/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/daniel/projects/1-personal/vuepress-lwd/node_modules/vue-loader/lib/index.js??ref--1-1!/home/daniel/projects/1-personal/vuepress-lwd/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/daniel/projects/1-personal/vuepress-lwd/blog/_posts/2019-09-18-publishing-your-first-wordpress-plugin-with-git-and-svn/README.md?vue&type=template&id=1ccd2cbf&","dependencies":[{"path":"/home/daniel/projects/1-personal/vuepress-lwd/blog/_posts/2019-09-18-publishing-your-first-wordpress-plugin-with-git-and-svn/README.md","mtime":1605195002531},{"path":"/home/daniel/projects/1-personal/vuepress-lwd/node_modules/cache-loader/dist/cjs.js","mtime":1602965084467},{"path":"/home/daniel/projects/1-personal/vuepress-lwd/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1604792111271},{"path":"/home/daniel/projects/1-personal/vuepress-lwd/node_modules/cache-loader/dist/cjs.js","mtime":1602965084467},{"path":"/home/daniel/projects/1-personal/vuepress-lwd/node_modules/vue-loader/lib/index.js","mtime":1604792111271},{"path":"/home/daniel/projects/1-personal/vuepress-lwd/node_modules/@vuepress/markdown-loader/index.js","mtime":1602965085750}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}