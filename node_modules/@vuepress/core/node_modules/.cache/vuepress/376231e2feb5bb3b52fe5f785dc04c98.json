{"remainingRequest":"/home/daniel/projects/1-personal/vuepress-lwd/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/daniel/projects/1-personal/vuepress-lwd/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/daniel/projects/1-personal/vuepress-lwd/node_modules/vue-loader/lib/index.js??ref--1-1!/home/daniel/projects/1-personal/vuepress-lwd/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/daniel/projects/1-personal/vuepress-lwd/blog/_posts/2015-01-17-install-wordpress-4-1-on-ubuntu-14-10/README.md?vue&type=template&id=1d33073c&","dependencies":[{"path":"/home/daniel/projects/1-personal/vuepress-lwd/blog/_posts/2015-01-17-install-wordpress-4-1-on-ubuntu-14-10/README.md","mtime":1606064332265},{"path":"/home/daniel/projects/1-personal/vuepress-lwd/node_modules/cache-loader/dist/cjs.js","mtime":1602965084467},{"path":"/home/daniel/projects/1-personal/vuepress-lwd/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1604792111271},{"path":"/home/daniel/projects/1-personal/vuepress-lwd/node_modules/cache-loader/dist/cjs.js","mtime":1602965084467},{"path":"/home/daniel/projects/1-personal/vuepress-lwd/node_modules/vue-loader/lib/index.js","mtime":1604792111271},{"path":"/home/daniel/projects/1-personal/vuepress-lwd/node_modules/@vuepress/markdown-loader/index.js","mtime":1602965085750}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}